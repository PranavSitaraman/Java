Loops If you think about it, we must be missing something basic in our study of Java so far. We’ve all experienced our computer being really busy for a long time, and we know it does things really fast. So, even if your favorite game program were a million lines of code, it would finish executing all those statements in at most a few minutes. However, you can play the game for hours! What’s happening? As you may have guessed, the computer is executing the same lines of code over and over again. For example, in a space-themed game, it’s updating the positions of all the spaceships, moving your ship if you pressed the right keys, checking to determine if any collisions have occurred, etc. It’s doing all of this dozens of times every second. We say it’s "looping", because once it gets to the last statement, it returns to the first statement and then continues: Every loop eventually finishes (like when the enemies destroy your ship!), and determining when and how the loop should "exit" is the tricky part of programming loops. Java provides several different ways to do this, and we’ll start with the simplest and then move on to the more complicated versions. One common reason to use loops is to repeat an action a specific number of times. For example, this tiny tic-tac-toe board repeats the same println four times: System.out.println System.out.println System.out.println System.out.println output... We said earlier that duplicating lines of code in a program is generally not a good thing, so instead we can use a "for loop" to repeat one line four times like this: for (int i = 1; i <= 4; i++) { System.out.println("+-+-+-+"); } Syntax for (initialization; test; update) { body } The for loop has four distinct parts: initialization int i=1 initializes the loop. In this example it defines the integer variable i which the loop will use to count to 4; it’s a "loop counter". You can use any variable you want here, including one declared previously in the code. termination i<=4 is the loop condition to determine whether the loop should continue or whether it should terminate. It keeps going as long as this Boolean expression evaluates to true; in this example, while the loop counter is less than or equal to 4. It’s important to know that this test is done at the beginning of the loop, so it’s possible to write a loop that runs zero times! increment i++ is the increment. If a loop that starts is ever going end, something has to change while it’s running change so that the test eventually becomes false. Despite it being in the for statement at the beginning of the loop, the update is done at the end of the loop, after the last statement in the body. It is also possible to use a decrement operator, such as i-- with a loop condition of i > 0, in which case the loop will run backwards. body The body of the loop is the code in the curly braces. It’s what runs over and over again until the test evaluates to false. For Loop Patterns The initialization, termination, and increment statements allow you to create for loops with lots of different patterns for the loop counter. All of the following loop four times, but with different patterns for the loop variable: for (int i = 0; i < 4; i++) // 0, 1, 2, 3 for (int j = 0; j <= 6; j += 2) // 0, 2, 4, 6 for (int x = 4; x > 0; x--) // 4, 3, 2, You will often use the value of the loop variable in the body of the code as well to implement a pattern where the repeated lines of code are similar but not exactly the same: System.out.println("2 squared = " + 2 * 2); System.out.println("3 squared = " + 3 * 3); System.out.println("4 squared = " + 4 * 4); System.out.println("5 squared = " + 5 * 5); System.out.println("6 squared = " + 6 * 6); Here’s a for loop that does the exact same thing: for (int n = 2; n <= 6; n++) { System.out.println(n + " squared = " + (n * n)); } Sometimes the first or last time through a loop needs to be a little different, as is the case in this bigger grid: Here’s one way to code this: for (int i=1; i<=3; i++) { System.out.println("+---+---+---+"); System.out.println("|---|---|---|"); } System.out.println("+---+---+---+"); Or: System.out.println("+---+---+---+"); for (int i=1; i<=3; i++) { System.out.println("|---|---|---|"); System.out.println("+---+---+---+"); } Or, finally you could use an if statement to avoid duplicating the line of code. Which of these variations you use depends on which you think best communicates the purpose of the code. for (int i=1; i<=4; i++) { System.out.println("+---+---+---+"); if (i < 4) { System.out.println("|---|---|---|"); } } Nested Loops Just as we could nest if statements inside of if statements, we can nest loops inside of loops. Here’s a simple example: for (int i = 1; i <= 2; i++) { System.out.println("Outer i = " + i); for (int j = 1; j <= 3; j++) { System.out.println(" Inner j = " + j); } } This code produces the following output: Outer i = 1 Inner j = 1 Inner j = 2 Inner j = 3 Outer i = 2 Inner j = 1 Inner j = 2 Inner j = 3 Here the body of the "outer" loop runs 2 times, and for each of those the "inner" loop runs 3 times, a total of 6. Nested loops like this are often used with two-dimensional tables and matrices with the outer loop handling the rows and the inner loop handling the columns. This code prints a 5x5 matrix of 0s: for (int row = 1; row <= 5; row++) { for (int col = 1; col <= 5; col++) { System.out.print("0 "); } System.out.println(); } The output: The inner loop prints a single line of the matrix, and the println() that is the last statement of the outer loop body advances to the next row of the matrix. This may seem more complicated than just printing "0 0 0 0 0" five times in a single loop, but note that it can deal with each value in the matrix separately. So, by adding an if statement inside the inner loop we can print an "identity matrix" with 1’s on the primary diagonal and zeros elsewhere: for (int row = 1; row <= 5; row++) { for (int col = 1; col <= 5; col++) { if (row == col) { System.out.println("1 "); } else { System.out.println("0 "); } System.out.println(); } } The output While Loops The for loops we’ve used so far are sometimes called "definite" loops, because we know before we start exactly how many times they’re going to repeat. In other situations, we are instead waiting for something to happen while we are looping that will tell us to stop. For example, we might break out of the loop when the user enters a specific command, or when a timer runs out, or when the user gets enough questions correct, etc. For these situations, Java provides a while loop, or an "indefinite" loop. The while loop includes only the test; you have to provide the initialization before the while, and be sure to include the update yourself in the body of the statement. variable initialization; while (test) { body variable update } The following loop prints the sum of all the numbers the user enters as long as it isn’t a zero (assume input has already been declared as a Scanner object): int sum = 0; int number = 1; while (number != 0) { System.out.println("Enter a number or 0 to get the sum: "); number = kb.nextInt(); sum += number; } System.out.println("The sum is " + sum); The initialization not only sets the value of the running sum to zero, it also has to initialize the value of the variable number to a value that will "force" the loop to run at least once. The update is the Scanner input that that changes the value of the number used in the test. Here’s an example while loop that doesn’t let the user out until they enter "yes" or "no". String answer = ""; while (!answer.equals("yes") && !answer.equals("no")) { System.out.println("Enter yes or no: "); answer = kb.getNext(); } System.out.println("Thank you!"); We’ve used boolean logic for this more complicated condition: we continue the loop as long as the user has not entered "yes" AND has not entered "no". We also had to initialize the loop by setting a value for answer that would force the loop body to run at least once. Adding an Error Prompt Here’s a variation that lets us use a different message if the user fails to enter the correct phrase the first time. In this case, if they do it right, the loop body doesn’t run at all. The initialization does, however, duplicate the scanner input statement which must be in the body of the loop as well so that the update happens! System.out.print("Enter yes or no: "); String answer = kb.getNext(); while (!answer.equals("yes") && !answer.equals("no")) { System.out.println("Enter ONLY yes or no, please: "); answer = kb.getNext(); } System.out.println("Thank you!"); Remember that the exclamation point negates the boolean expression. !answer.equals("yes") is the same as answer.equals("yes") == false. Do-While Another variation of a loop is called a do-while loop and this eliminates the repetition of asking for the input twice. It basically ensures that a certain set of instructions gets run at least once, before the condition in the while loop is evaluated. String answer; do { System.out.print("Enter yes or no: "); answer = kb.getNext(); } while (!answer.equals("yes") && !answer.equals("no")); System.out.println("Thank you!"); 
